import TicTacToe from '../lib/tictactoe.js'

let handler = async (m, { conn, usedPrefix, command, text }) => {
    conn.game = conn.game ? conn.game : {}
    if (Object.values(conn.game).find(room => room.id.startsWith('tictactoe') && [room.game.playerX, room.game.playerO].includes(m.sender))) throw `·¥õ·¥è·¥Ö·¥Ä·¥†…™·¥Ä ·¥ás·¥õ·¥Ä ·¥á…¥ ·¥á ü ·¥ä·¥ú·¥á…¢·¥ès ·¥ò·¥Ä Ä·¥Ä s·¥Ä ü…™ Ä ·¥ò·¥è…¥·¥á Ä: *${usedPrefix}delttt*`
    if (!text) throw ` è ·¥á ü …¥·¥è·¥ç ô Ä·¥á ·¥Ö·¥á ü  ü·¥Ä s·¥Ä ü·¥Ä?\n ·¥á·¥ä·¥á·¥ç·¥ò ü·¥è: .ttt novaboot`
    let room = Object.values(conn.game).find(room => room.state === 'WAITING' && (text ? room.name === text : true))
    // m.reply('[WIP Feature]')
    if (room) {
        m.reply('·¥ä·¥ú…¢·¥Ä·¥Ö·¥ès ·¥á…¥·¥Ñ·¥è…¥·¥õ Ä·¥Ä·¥Ö·¥è ‚úÖ')
        room.o = m.chat
        room.game.playerO = m.sender
        room.state = 'PLAYING'
        let arr = room.game.render().map(v => {
            return {
                X: '‚ùé',
                O: '‚≠ï',
                1: '1Ô∏è‚É£',
                2: '2Ô∏è‚É£',
                3: '3Ô∏è‚É£',
                4: '4Ô∏è‚É£',
                5: '5Ô∏è‚É£',
                6: '6Ô∏è‚É£',
                7: '7Ô∏è‚É£',
                8: '8Ô∏è‚É£',
                9: '9Ô∏è‚É£',
            }[v]
        })
        let str = `
·¥ás·¥ò·¥á Ä·¥Ä·¥Ö·¥è ·¥Ä @${room.game.currentTurn.split('@')[0]} ·¥Ñ·¥è·¥ç·¥è ·¥ò Ä…™·¥ç·¥á Ä ·¥ä·¥ú…¢·¥Ä·¥Ö·¥è Ä
        
${arr.slice(0, 3).join('')}
${arr.slice(3, 6).join('')}
${arr.slice(6).join('')}

‚ñ¢ *s·¥Ä ü·¥Ä* ${room.id}

‚ñ¢ * Ä·¥á…¢ ü·¥Äs*
‚Ä£  ú·¥Ä·¥¢ 3 “ì…™ ü·¥Äs ·¥Ö·¥á s…™·¥ç ô·¥è ü·¥ès ·¥†·¥á Ä·¥õ…™·¥Ñ·¥Ä ü·¥ás,  ú·¥è Ä…™·¥¢·¥è…¥·¥õ·¥Ä ü·¥ás ·¥è ·¥Ö…™·¥Ä…¢·¥è…¥·¥Ä ü·¥ás ·¥ò·¥Ä Ä·¥Ä …¢·¥Ä…¥·¥Ä Ä
‚Ä£ ·¥ás·¥Ñ Ä…™ ô·¥á *s·¥ú Ä Ä·¥á…¥·¥Ö·¥á Ä* ·¥ò·¥Ä Ä·¥Ä s·¥Ä ü…™ Ä ·¥Ö·¥á ü ·¥ä·¥ú·¥á…¢·¥è.
`.trim()
        if (room.x !== room.o) await conn.sendButton(room.x, str, fgig, ['Surrender', 'surrender'], m, {
            mentions: conn.parseMention(str)
        })
        await conn.sendButton(room.o, str, fgig, ['Surrender', 'surrender'], m, {
            mentions: conn.parseMention(str)
        })
    } else {
        room = {
            id: 'tictactoe-' + (+new Date),
            x: m.chat,
            o: '',
            game: new TicTacToe(m.sender, 'o'),
            state: 'WAITING'
        }
        if (text) room.name = text
        
     conn.sendButton(m.chat, `‚è≥ *·¥ás·¥ò·¥á Ä·¥Ä…¥·¥Ö·¥è ·¥Ä ü s…™…¢·¥ú…™·¥á…¥·¥õ·¥á ·¥ä·¥ú…¢·¥Ä·¥Ö·¥è*\n·¥ás·¥Ñ Ä…™ ô·¥Ä ·¥á ü s…™…¢·¥ú…™·¥á…¥·¥õ·¥á ·¥Ñ·¥è·¥ç·¥Ä…¥·¥Ö·¥è ·¥è ·¥ò Ä·¥ás…™·¥è…¥·¥Ä ·¥á ü  ô·¥è·¥õ·¥è…¥
‚óè *${usedPrefix + command} ${text}*

üéÅ  Ä·¥á·¥Ñ·¥è·¥ç·¥ò·¥á…¥s·¥Ä : *4999 XP*`, fgig, ['üëçüèª Aceptar', `${usedPrefix + command} ${text}`], m, {
            mentions: conn.parseMention(text)
        })
        
   conn.game[room.id] = room
    }
    
}

handler.help = ['tictactoe <nombre Sala>']
handler.tags = ['game']
handler.command = ['tictactoe', 'ttc', 'ttt', 'xo']

export default handler